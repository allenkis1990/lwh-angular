{"version":3,"sources":["main.config.js"],"names":[],"mappings":";AACA;AACA,IAAI,SAAS,OAAO,QAAP,CAAgB,IAAhB,CAAqB,OAArB,CAA6B,sBAA7B,EAAqD,EAArD,EAAyD,KAAzD,CAA+D,GAA/D,EAAoE,CAApE,EAAuE,OAAvE,CAA+E,QAA/E,EAAyF,EAAzF,CAAb;AACI;AACA;AACA,MAAM,aAAa,OAAnB;;AAEJ;;AAEA,IAAI,aAAa,YAAY;AACzB,WAAO;AACH,iBAAS,MAAM,WAAN,GAAoB,EAD1B;AAEH,qBAAa,MAAM,gBAAgB,OAAhB,GAA0B,MAAhC,GAAyC,IAFnD;AAGH;AACA;AACA,iBAAS,MAAM,QAAN,GAAiB;AALvB,KAAP;AAOH,CARgB,EAAjB;;AAUA,IAAI,GAAJ,EAAS;AACL,YAAQ,MAAR,CAAe;AACX,iBAAS,WAAW;AADT,KAAf;AAGH;;AAED,QAAQ,MAAR,CAAe;AACX;AACA;AACA,WAAO;AACH,qBAAa,aADV;AAEH,kBAAU,UAFP;AAGH,iBAAS,mCAHN;AAIH,yBAAiB,qDAJd;AAKH,yBAAiB,+DALd;AAMH,qBAAa,gDANV;AAOH,gBAAQ,sCAPL;AAQH,oBAAY,8CART;AASH,wBAAgB,gEATb;AAUH,gBAAQ,iCAVL;AAWH,oBAAY;AAXT,KAHI;AAgBX,UAAM;AACF,iBAAS,EAAC,MAAM,CAAC,QAAD,CAAP,EAAmB,SAAS,SAA5B,EADP;AAEF,qBAAa,EAAC,MAAM,CAAC,QAAD,EAAW,SAAX,CAAP,EAA8B,SAAS,aAAvC,EAFX;AAGF,yBAAiB,EAAC,MAAM,CAAC,SAAD,CAAP,EAAoB,SAAS,iBAA7B,EAHf;AAIF,oBAAY,EAAC,MAAM,CAAC,SAAD,CAAP,EAAoB,SAAS,YAA7B,EAJV;AAKF,yBAAiB,EAAC,MAAM,CAAC,SAAD,CAAP,EAAoB,SAAS,iBAA7B,EALf;AAMF,wBAAgB,EAAC,MAAM,CAAC,iBAAD,CAAP,EAA4B,SAAS,gBAArC,EANd;AAOF,gBAAQ,EAAC,SAAS,GAAV;AAPN,KAhBK;AAyBX,cAAU,EAzBC;AA0BX,iBAAa;AA1BF,CAAf;;AA8BA,QAAQ,UAAR,GAAqB,UAArB;;AAEA;AACA,QAAQ,CAAC,SAAD,CAAR,EAAqB,YAAY;;AAE7B,QAAI,GAAJ,EAAS;AACL,gBAAQ,CAAC,oBAAD,CAAR,EAAgC,UAAU,WAAV,EAAuB;AACnD,sBAAW,WAAX;AACH,SAFD;AAGH,KAJD,MAIO;AACH,kBAAU,SAAV;AACH;;AAED;;;;;AAKA,aAAS,SAAT,CAAmB,WAAnB,EAAgC;AAC5B,eAAO,iBAAP,EAA0B,WAA1B;AACA,gBAAQ,GAAR,CAAY,WAAW,WAAvB;AACA,gBAAQ,CAAC,WAAW,WAAX,GAAyB,UAA1B,CAAR,EAA+C,UAAU,GAAV,EAAe;AAC1D,oBAAQ,GAAR,CAAY,GAAZ;AACA,oBAAQ,SAAR,CAAkB,SAAS,eAA3B,EAA4C,CAAC,KAAD,CAA5C;AACH,SAHD;AAIH;AACJ,CAvBD","file":"main.config-compiled.js","sourcesContent":["\n// 获取访问当前应用的domain\nvar domain = window.location.href.replace(/http:\\/\\/|https:\\/\\//, '').split('/')[0].replace(/:\\d{4}/, '');\n    // 判断dev!='false'的时候为开发环境，\n    // 在构建的时候将变量替换成false；dev就为false ，意思为测试环境或者是生产环境\n    dev = '$$dev$$' != 'false';\n\n// 根据上面配置dev判断是否是开发环境，\n\nvar devOptions = function () {\n    return {\n        baseUrl: dev ? '/admin/js' : '',\n        mainAppPath: dev ? '../modules/' + appName + '/js/' : './',\n        // 开发环境的时候没有做目录分离， 加载的内容基本从母版内容那边引入，\n        // 测试或者生产环境对目录分离后加载的内容基本以自己的为准\n        loadDir: dev ? '../../' : ''\n    }\n}();\n\nif (dev) {\n    require.config({\n        baseUrl: devOptions.baseUrl\n    })\n}\n\nrequire.config({\n    // urlArgs    : (+new Date ()) + '',\n    //baseUrl: '/bower_components/',\n    paths: {\n        controllers: 'controllers',\n        services: 'services',\n        angular: '/bower_components/angular/angular',\n        angularSanitize: '/bower_components/angular-sanitize/angular-sanitize',\n        angularUiRouter: '/bower_components/angular-ui-router/release/angular-ui-router',\n        restangular: '/bower_components/restangular/dist/restangular',\n        jquery: '/bower_components/jquery/dist/jquery',\n        oclazyload: '/bower_components/oclazyload/dist/ocLazyLoad',\n        uiRouterExtras: '/bower_components/ui-router-extras/release/ct-ui-router-extras',\n        lodash: '/bower_components/lodash/lodash',\n        prometheus: '/bower_components/prometheus/src'\n    },\n    shim: {\n        angular: {deps: ['jquery'], exports: 'angular'},\n        restangular: {deps: ['lodash', 'angular'], exports: 'restangular'},\n        angularSanitize: {deps: ['angular'], exports: 'angularSanitize'},\n        oclazyload: {deps: ['angular'], exports: 'oclazyload'},\n        angularUiRouter: {deps: ['angular'], exports: 'angularUiRouter'},\n        uiRouterExtras: {deps: ['angularUiRouter'], exports: 'uiRouterExtras'},\n        lodash: {exports: '_'}\n    },\n    packages: [],\n    waitSeconds: 0\n});\n\n\nrequire.devOptions = devOptions;\n\n// 优先加载angular，\nrequire(['angular'], function () {\n\n    if (dev) {\n        require(['common/stateMapper'], function (stateMapper) {\n            bootstrap( stateMapper);\n        })\n    } else {\n        bootstrap(undefined);\n    }\n\n    /**\n     * 应用正式启动\n     * @param appConfig\n     * @param stateMapper\n     */\n    function bootstrap(stateMapper) {\n        define('baseStateMapper', stateMapper);\n        console.log(devOptions.mainAppPath);\n        require([devOptions.mainAppPath + 'main.app'], function (app) {\n            console.log(app);\n            angular.bootstrap(document.documentElement, ['app']);\n        });\n    }\n});\n\n\n"]}